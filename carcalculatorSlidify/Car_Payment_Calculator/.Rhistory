print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
week1_q3 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.999)$vector
result <- 3 * result
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
}
# main()
library("igraph")
week1_q3()
week1_q2()
week1_q2 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.85)$vector
result <- 3 * result
a <- result[1]
b <- result[2]
c <- result[3]
print (c == .9 * b  + .475*a)
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
# c = b + .575a
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# 85b = .575a + .15c
print(paste('85b => ', 85 * result[2]))
print(paste('.575a + .15c => ', 0.575* result[1] + 0.15 * result[3]))
# .95a = .9c + .05b
print(paste('.95a => ', 0.95 * result[1]))
print(paste('.9c + .05b => ', 0.9 * result[3] + 0.05 * result[2]))
# b = .475a + .05c
print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
week1_q2 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.85)$vector
result <- 3 * result
a <- result[1]
b <- result[2]
c <- result[3]
print (c == .9 * b  + .475*a)
print (a == c  + .15*b)
print (.95b == .475* a  + .05*c)
print (.85c ==  b  + .575*a)
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
# c = b + .575a
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# 85b = .575a + .15c
print(paste('85b => ', 85 * result[2]))
print(paste('.575a + .15c => ', 0.575* result[1] + 0.15 * result[3]))
# .95a = .9c + .05b
print(paste('.95a => ', 0.95 * result[1]))
print(paste('.9c + .05b => ', 0.9 * result[3] + 0.05 * result[2]))
# b = .475a + .05c
print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
week1_q2 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.85)$vector
result <- 3 * result
a <- result[1]
b <- result[2]
c <- result[3]
print (c == .9 * b  + .475*a)
print (a ==  c  + .15*b)
print (.95* b == .475* a  + .05*c)
print (.85*c ==  b  + .575*a)
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
# c = b + .575a
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# 85b = .575a + .15c
print(paste('85b => ', 85 * result[2]))
print(paste('.575a + .15c => ', 0.575* result[1] + 0.15 * result[3]))
# .95a = .9c + .05b
print(paste('.95a => ', 0.95 * result[1]))
print(paste('.9c + .05b => ', 0.9 * result[3] + 0.05 * result[2]))
# b = .475a + .05c
print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
week1_q2 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.85)$vector
result <- 3 * result
a <- result[1]
b <- result[2]
c <- result[3]
print (c == .9 * b  + .475*a)
print (a ==  c  + .15*b)
print (.95* b)
print( .475* a  + .05*c)
print (.85*c )
print ( b  + .575*a)
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
# c = b + .575a
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# 85b = .575a + .15c
print(paste('85b => ', 85 * result[2]))
print(paste('.575a + .15c => ', 0.575* result[1] + 0.15 * result[3]))
# .95a = .9c + .05b
print(paste('.95a => ', 0.95 * result[1]))
print(paste('.9c + .05b => ', 0.9 * result[3] + 0.05 * result[2]))
# b = .475a + .05c
print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
week1_q1 <- function() {
#  G <- read.table("q1_dataset.txt", header = FALSE)
G <- rbind(c(0,1,1),c(0,0,1),c(0,0,1))
print(G)
g <- graph.adjacency(G, mode="directed")
# g <- random.graph.game(20, 5/20, directed=TRUE)
result <- page.rank(g, algo="prpack", damping=0.7)$vector
#   G <- rbind(c(0,1,1),c(0,0,1),c(0,0,1))
#   print(G)
#   result <- pagerank_markpeng(G,'power', 0.7)
# result <- pagerank(G,'eigen', 0.7)
#   print(result)
result <- 3 * result
# ra + rb
print(paste('a + b = ', result[1] + result[2]))
# rb + rc
print(paste('b + c = ', result[2] + result[3]))
# ra + rc
print(paste('a + c = ', result[1] + result[3]))
# ra + rb + rc
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
}
pagerank_markpeng <- function(G,method='eigen',d=.85,niter=100){
# follows the notation of the matlab article on pagerank.
# at http://www.mathworks.com/company/newsletters/news_notes/clevescorner/oct02_cleve.html
# G is a connectivity matrix, with G[i,j]=1 if page i points to page j
# method is either "power" or "eigen"
# compute indegree of each node
cvec <- apply(G,2,sum)
# print(cvec)
cvec[cvec==0] <- 1 # nodes with indegree 0 will cause problems if we divide by 0.
# print(cvec)
# compuate outdegree of each node
gvec <- apply(G,1,sum)
# print(gvec)
n <- nrow(G)
#   print(n)
delta <- (1-d)/n
#   print(delta)
A <- matrix(0,nrow(G),ncol(G))
oldR <- cbind(1, 1, 1)
for (i in 1:n)
{
for (j in 1:n)
{
}
}
}
pagerank <- function(G,method='eigen',d=.85,niter=100){
# follows the notation of the matlab article on pagerank.
# at http://www.mathworks.com/company/newsletters/news_notes/clevescorner/oct02_cleve.html
# G is a connectivity matrix, with G[i,j]=1 if page i points to page j
# method is either "power" or "eigen"
# compute indegree of each node
cvec <- apply(G,2,sum)
# print(cvec)
cvec[cvec==0] <- 1 # nodes with indegree 0 will cause problems if we divide by 0.
# print(cvec)
# compuate outdegree of each node
gvec <- apply(G,1,sum)
# print(gvec)
n <- nrow(G)
print(n)
delta <- (1-d)/n
print(delta)
A <- matrix(delta,nrow(G),ncol(G))
print(A)
for (i in 1:n)
A[i,] <- A[i,] + d*G[i,]/cvec
#  print(A)
if (method=='power'){
x <- rep(1,n)
for (i in 1:niter) x <- A%*%x
} else {
x <- Re(eigen(A)$vector[,1])
}
x/sum(x)
}
# main()
library("igraph")
week1_q1()
week1_q2 <- function() {
G <- rbind(c(0,1,1),c(0,0,1),c(1,0,0))
print(G)
g <- graph.adjacency(G, mode="directed")
result <- page.rank(g, algo="prpack", damping=0.85)$vector
result <- 3 * result
a <- result[1]
b <- result[2]
c <- result[3]
print (c == .9 * b  + .475*a)
print (a ==  c  + .15*b)
print (.95* b)
print( .475* a  + .05*c)
print (.85*c )
print ( b  + .575*a)
# a
print(paste('a = ', result[1]))
# b
print(paste('b = ', result[2]))
# c
print(paste('c = ', result[3]))
# a + b + c
print(paste('a + b + c = ', result[1] + result[2] + result[3]))
# c = b + .575a
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# 85b = .575a + .15c
print(paste('85b => ', 85 * result[2]))
print(paste('.575a + .15c => ', 0.575* result[1] + 0.15 * result[3]))
# .95a = .9c + .05b
print(paste('.95a => ', 0.95 * result[1]))
print(paste('.9c + .05b => ', 0.9 * result[3] + 0.05 * result[2]))
# b = .475a + .05c
print(paste('.475a + .05c => ', 0.475 * result[1] + 0.05 * result[3]))
# .85c = b + .575a
print(paste('.85c  => ', 0.85 * result[3]))
print(paste('b + .575a => ', result[2] + 0.575 * result[1]))
# .85a = c + .15b
print(paste('.85a  => ', 0.85 * result[1]))
print(paste('c + .15b => ', result[3] + 0.15 * result[2]))
# .95c = .9b + .475a
print(paste('.95c  => ', 0.95 * result[3]))
print(paste('.9b + .475a  => ', 0.9 * result[2] + 0.475 * result[1]))
}
# main()
library("igraph")
week1_q2()
install.packages(c("devtools", "evaluate", "formatR", "highr", "Hmisc", "Rcpp"))
install.packages(c("BH", "curl", "doParallel", "foreach", "GGally", "ggplot2", "git2r", "HistData", "Hmisc", "htmltools", "irlba", "iterators", "jsonlite", "lubridate", "packrat", "Rcpp", "rmarkdown", "RMySQL", "roxygen2", "rstudioapi", "stringi", "testthat", "xtable"))
install.packages("caret")
install.packages("kernlab")
install.packages("RNeo4j")
library(igraph)
install.packages("httr")
install.packages("RJSONIO")
install.packages("testthat")
install.packages("RNeo4j")
install.packages("igraph")
library (RNeo4j)
library (igraph)
graph = startGraph("http://localhost:7474/db/data/")
graph
graph = startGraph("http://localhost:7474/db/data/")
graph = startGraph("http://localhost:7474/db/data/", username="neo4j", password="neo4j")
graph = startGraph("http://localhost:7474/db/data/")
graph
install.packages("shiny")
require(devtools)
install_github('ramnathv/rCharts')
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("~/carcalculatorSlidify/Car_Payment_Calculator")
slidify("index.Rmd")
```{r carInterest, echo=FALSE }
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,5)
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (r)
N <- n
print (N)
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,5)
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (r)
N <- n
print (N)
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,5)
CalculatePaymentAmount(20000,60,5)
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (r)
N <- n
print (N)
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,6)
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print format(r,digits=2,nsmall=2)
N <- n
print (N)
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,6)
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print format(r,digits=2,nsmall=2)
N <- n
print (N)
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print format(r,digits=2,nsmall=2)
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print format(r,digits=2,nsmall=2)
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print format(r,digits=2,nsmall=2)
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (format(r,digits=2,nsmall=2)
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (format(r,digits=2,nsmall=2))
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
CalculatePaymentAmount(20000,60,6)
calculatePaymentAmount(20000,60,6)
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (format(r,digits=6,nsmall=6))
print (format(1+r,digits=6,nsmall=6))
print (format((1+r)^(-n),digits=6,nsmall=6))
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount(20000,60,6)
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/1000
print (format(r,digits=8,nsmall=8))
print (format(1+r,digits=6,nsmall=6))
print (format((1+r)^(-n),digits=6,nsmall=6))
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount(20000,60,6)
calculatePaymentAmount<-function(P,n, R) {
r <- (R/12)/100
print (format(r,digits=8,nsmall=8))
print (format(1+r,digits=6,nsmall=6))
print (format((1+r)^(-n),digits=6,nsmall=6))
N <- n
M <- (P*r)/(1-(1+r)^(-n))
monthPay <- M
totalPay <- M*n -P
return (c(monthPay,totalPay))
}
calculatePaymentAmount(20000,60,6)
}
slidify("index.Rmd")
